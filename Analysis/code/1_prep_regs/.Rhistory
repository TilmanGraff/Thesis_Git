CBD = SpatialPoints(CBD_coeff)
crs(CBD) = "+proj=longlat +datum=WGS84 +no_defs"
mrt = SpatialPoints(read_xlsx("/Users/tilmangraff/Library/CloudStorage/GoogleDrive-tgraff@g.harvard.edu/My Drive/optnets_replication/dataraw/other/mrt_stations.xlsx")[,c("longitude", "latitude")])
crs(mrt) = "+proj=longlat +datum=WGS84 +no_defs"
basepath = "/Users/tilmangraff/Library/CloudStorage/GoogleDrive-tgraff@g.harvard.edu/My Drive/optnets_replication/"
DKI = readOGR(paste0(basepath, "/dataraw/gis/shapefiles/DKI/dki-kabupaten-dissolved.shp"))
for(res in c("500", "1000", "2000")){
for(type in c("hex", "square")){
outpath = paste0(basepath, "datacoded/gis/full_geography/", res, "-", res,  "/", type)
grid = readOGR(paste0(outpath, "/shapefile/grid.shp"))
covs = data.frame("id" = grid$id)
### distance to CBD
dist_CBD = as.numeric(gDistance(gCentroid(grid, byid = T), CBD, byid = T))
covs$dist_CBD = dist_CBD
### is MRT
is_mrt = as.numeric(!is.na(over(grid, mrt)))
covs$is_mrt = is_mrt
### demographics
if(file.exists(paste0(basepath, "dataraw/poverty_map_2/version_2022_08/poverty-rate_", type, res, ".csv"))){
demo = read.csv(paste0(basepath, "dataraw/poverty_map_2/version_2022_08/poverty-rate_", type, res, ".csv"))
demo$ispoor = as.numeric(demo$fgt0_2020 >= median(demo$fgt0_2020))
covs = merge(covs, demo, by.x = "id", by.y = "grid_id", all.x = T)
}
### DKI indicator
covs$is_DKI = as.numeric(gIntersects(grid, DKI, byid = T))
### can add some here (morning commute?)
### export
write.csv(covs, paste0(outpath, "/geo-stats/covariates.csv"))
}
}
basepath
type
btype = "brt"
file.exists(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_", btype))
paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_", btype)
file.exists(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_", btype, ".csv"))
paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_", btype, ".csv")
file.exists(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_bdrive_", btype, ".csv"))
bdrive = read.csv(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_bdrive_", btype, ".csv"))
dim(bdrive)
bdrive = read.csv(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_bdrive_", btype, ".csv"), header = F)
dim(bdrive)
#######################
# this script build a covariates dataframe for each geography
#######################
require(sp)
require(rgeos)
require(rgdal)
require(terra)
require(readxl)
CBD_coeff = data.frame("lon" = 106.82747045791965, "lat" = -6.176975875789045)
CBD = SpatialPoints(CBD_coeff)
crs(CBD) = "+proj=longlat +datum=WGS84 +no_defs"
mrt = SpatialPoints(read_xlsx("/Users/tilmangraff/Library/CloudStorage/GoogleDrive-tgraff@g.harvard.edu/My Drive/optnets_replication/dataraw/other/mrt_stations.xlsx")[,c("longitude", "latitude")])
crs(mrt) = "+proj=longlat +datum=WGS84 +no_defs"
basepath = "/Users/tilmangraff/Library/CloudStorage/GoogleDrive-tgraff@g.harvard.edu/My Drive/optnets_replication/"
DKI = readOGR(paste0(basepath, "/dataraw/gis/shapefiles/DKI/dki-kabupaten-dissolved.shp"))
for(res in c("500", "1000", "2000")){
for(type in c("hex", "square")){
outpath = paste0(basepath, "datacoded/gis/full_geography/", res, "-", res,  "/", type)
grid = readOGR(paste0(outpath, "/shapefile/grid.shp"))
covs = data.frame("id" = grid$id)
### distance to CBD
dist_CBD = as.numeric(gDistance(gCentroid(grid, byid = T), CBD, byid = T))
covs$dist_CBD = dist_CBD
### is MRT
is_mrt = as.numeric(!is.na(over(grid, mrt)))
covs$is_mrt = is_mrt
### demographics
if(file.exists(paste0(basepath, "dataraw/poverty_map_2/version_2022_08/poverty-rate_", type, res, ".csv"))){
demo = read.csv(paste0(basepath, "dataraw/poverty_map_2/version_2022_08/poverty-rate_", type, res, ".csv"))
demo$ispoor = as.numeric(demo$fgt0_2020 >= median(demo$fgt0_2020))
covs = merge(covs, demo, by.x = "id", by.y = "grid_id", all.x = T)
}
### DKI indicator
covs$is_DKI = as.numeric(gIntersects(grid, DKI, byid = T))
### can add some here (morning commute?)
### export
write.csv(covs, paste0(outpath, "/geo-stats/covariates.csv"))
#########
### if exists, add bdrive over from raw
#########
for(btype in c("brt", "nonbrt")){
if(file.exists(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_bdrive_", btype, ".csv"))){
bdrive = read.csv(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_bdrive_", btype, ".csv"), header = F)
write.csv(paste0(outpath, "/bdrive_", btype, ".csv"))
}
}
}
}
outpath
btypew
btype
file.exists(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_bdrive_", btype, ".csv"))
bdrive = read.csv(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_bdrive_", btype, ".csv"), header = F)
write.csv(paste0(outpath, "/bdrive_", btype, ".csv"))
#######################
# this script build a covariates dataframe for each geography
#######################
require(sp)
require(rgeos)
require(rgdal)
require(terra)
require(readxl)
CBD_coeff = data.frame("lon" = 106.82747045791965, "lat" = -6.176975875789045)
CBD = SpatialPoints(CBD_coeff)
crs(CBD) = "+proj=longlat +datum=WGS84 +no_defs"
mrt = SpatialPoints(read_xlsx("/Users/tilmangraff/Library/CloudStorage/GoogleDrive-tgraff@g.harvard.edu/My Drive/optnets_replication/dataraw/other/mrt_stations.xlsx")[,c("longitude", "latitude")])
crs(mrt) = "+proj=longlat +datum=WGS84 +no_defs"
basepath = "/Users/tilmangraff/Library/CloudStorage/GoogleDrive-tgraff@g.harvard.edu/My Drive/optnets_replication/"
DKI = readOGR(paste0(basepath, "/dataraw/gis/shapefiles/DKI/dki-kabupaten-dissolved.shp"))
for(res in c("500", "1000", "2000")){
for(type in c("hex", "square")){
outpath = paste0(basepath, "datacoded/gis/full_geography/", res, "-", res,  "/", type)
grid = readOGR(paste0(outpath, "/shapefile/grid.shp"))
covs = data.frame("id" = grid$id)
### distance to CBD
dist_CBD = as.numeric(gDistance(gCentroid(grid, byid = T), CBD, byid = T))
covs$dist_CBD = dist_CBD
### is MRT
is_mrt = as.numeric(!is.na(over(grid, mrt)))
covs$is_mrt = is_mrt
### demographics
if(file.exists(paste0(basepath, "dataraw/poverty_map_2/version_2022_08/poverty-rate_", type, res, ".csv"))){
demo = read.csv(paste0(basepath, "dataraw/poverty_map_2/version_2022_08/poverty-rate_", type, res, ".csv"))
demo$ispoor = as.numeric(demo$fgt0_2020 >= median(demo$fgt0_2020))
covs = merge(covs, demo, by.x = "id", by.y = "grid_id", all.x = T)
}
### DKI indicator
covs$is_DKI = as.numeric(gIntersects(grid, DKI, byid = T))
### can add some here (morning commute?)
### export
write.csv(covs, paste0(outpath, "/geo-stats/covariates.csv"))
#########
### if exists, add bdrive over from raw
#########
for(btype in c("brt", "nonbrt")){
if(file.exists(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_bdrive_", btype, ".csv"))){
bdrive = read.csv(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_bdrive_", btype, ".csv"), header = F)
write.csv(bdrive, paste0(outpath, "/bdrive_", btype, ".csv"))
}
}
}
}
bdrive = read.csv(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_bdrive_", btype, ".csv"), header = F)
bdrive
dimbdirve
dim(bdrive)
bdrive[bdrive==Inf] = 0
sp_g = graph_from_adjacency_matrix(as.matrix(bdrive), weighted = TRUE)
require(igraph)
sp_g = graph_from_adjacency_matrix(as.matrix(bdrive), weighted = TRUE)
asp_list = vector(mode = "list", length(sp_adj))
# find shortest paths
for(i in 1:length(sp_adj)){
asp = shortest_paths(sp_g, from = i)
asp_list[[i]] = lapply(asp$vpath, as.numeric)
}
asp_list = vector(mode = "list", length(bdrive))
# find shortest paths
for(i in 1:length(sp_adj)){
asp = shortest_paths(sp_g, from = i)
asp_list[[i]] = lapply(asp$vpath, as.numeric)
}
# find shortest paths
for(i in 1:length(bdrive)){
asp = shortest_paths(sp_g, from = i)
asp_list[[i]] = lapply(asp$vpath, as.numeric)
}
bdrive[covs$is_DKI, covs$is_DKI]
which(bdrive[covs$is_DKI, covs$is_DKI])
which(covs$is_DKI)
covs$is_DKI
find(covs$is_DKI)
find(covs$is_DKI == 1)
which(covs$is_DKI == 1)
sp_adj = bdrive[which(covs$is_DKI == 1), which(covs$is_DKI == 1)]
sp_adj
dim(sp_adj)
#######################
# this script build a covariates dataframe for each geography
#######################
require(sp)
require(rgeos)
require(rgdal)
require(terra)
require(readxl)
require(igraph)
CBD_coeff = data.frame("lon" = 106.82747045791965, "lat" = -6.176975875789045)
CBD = SpatialPoints(CBD_coeff)
crs(CBD) = "+proj=longlat +datum=WGS84 +no_defs"
mrt = SpatialPoints(read_xlsx("/Users/tilmangraff/Library/CloudStorage/GoogleDrive-tgraff@g.harvard.edu/My Drive/optnets_replication/dataraw/other/mrt_stations.xlsx")[,c("longitude", "latitude")])
crs(mrt) = "+proj=longlat +datum=WGS84 +no_defs"
basepath = "/Users/tilmangraff/Library/CloudStorage/GoogleDrive-tgraff@g.harvard.edu/My Drive/optnets_replication/"
DKI = readOGR(paste0(basepath, "/dataraw/gis/shapefiles/DKI/dki-kabupaten-dissolved.shp"))
for(res in c("500", "1000", "2000")){
for(type in c("hex", "square")){
outpath = paste0(basepath, "datacoded/gis/full_geography/", res, "-", res,  "/", type)
grid = readOGR(paste0(outpath, "/shapefile/grid.shp"))
covs = data.frame("id" = grid$id)
### distance to CBD
dist_CBD = as.numeric(gDistance(gCentroid(grid, byid = T), CBD, byid = T))
covs$dist_CBD = dist_CBD
### is MRT
is_mrt = as.numeric(!is.na(over(grid, mrt)))
covs$is_mrt = is_mrt
### demographics
if(file.exists(paste0(basepath, "dataraw/poverty_map_2/version_2022_08/poverty-rate_", type, res, ".csv"))){
demo = read.csv(paste0(basepath, "dataraw/poverty_map_2/version_2022_08/poverty-rate_", type, res, ".csv"))
demo$ispoor = as.numeric(demo$fgt0_2020 >= median(demo$fgt0_2020))
covs = merge(covs, demo, by.x = "id", by.y = "grid_id", all.x = T)
}
### DKI indicator
covs$is_DKI = as.numeric(gIntersects(grid, DKI, byid = T))
### can add some here (morning commute?)
### export
write.csv(covs, paste0(outpath, "/geo-stats/covariates.csv"))
#########
### if exists, add bdrive over from raw and compute shortest paths
#########
for(btype in c("brt", "nonbrt")){
if(file.exists(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_bdrive_", btype, ".csv"))){
bdrive = read.csv(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_bdrive_", btype, ".csv"), header = F)
write.csv(bdrive, paste0(outpath, "/bdrive_", btype, ".csv"))
for(dkitype in c(TRUE, FALSE)){
if(dkitype){
sp_adj = bdrive[which(covs$is_DKI == 1), which(covs$is_DKI == 1)]
suffix = "_DKI"
}else{
sp_adj = bdrive
suffix = ""
}
sp_adj[sp_adj==Inf] = 0
sp_g = graph_from_adjacency_matrix(as.matrix(sp_adj), weighted = TRUE)
asp_list = vector(mode = "list", length(sp_adj))
# find shortest paths
for(i in 1:length(sp_adj)){
asp = shortest_paths(sp_g, from = i)
asp_list[[i]] = lapply(asp$vpath, as.numeric)
}
write_json(asp_list, path = paste0(outfoldertype, "/spaths_", bustype, suffix,  ".json"))
}
}
}
}
}
require(jsonlite)
#######################
# this script build a covariates dataframe for each geography
#######################
require(sp)
require(rgeos)
require(rgdal)
require(terra)
require(readxl)
require(igraph)
require(jsonlite)
CBD_coeff = data.frame("lon" = 106.82747045791965, "lat" = -6.176975875789045)
CBD = SpatialPoints(CBD_coeff)
crs(CBD) = "+proj=longlat +datum=WGS84 +no_defs"
mrt = SpatialPoints(read_xlsx("/Users/tilmangraff/Library/CloudStorage/GoogleDrive-tgraff@g.harvard.edu/My Drive/optnets_replication/dataraw/other/mrt_stations.xlsx")[,c("longitude", "latitude")])
crs(mrt) = "+proj=longlat +datum=WGS84 +no_defs"
basepath = "/Users/tilmangraff/Library/CloudStorage/GoogleDrive-tgraff@g.harvard.edu/My Drive/optnets_replication/"
DKI = readOGR(paste0(basepath, "/dataraw/gis/shapefiles/DKI/dki-kabupaten-dissolved.shp"))
for(res in c("500", "1000", "2000")){
for(type in c("hex", "square")){
outpath = paste0(basepath, "datacoded/gis/full_geography/", res, "-", res,  "/", type)
grid = readOGR(paste0(outpath, "/shapefile/grid.shp"))
covs = data.frame("id" = grid$id)
### distance to CBD
dist_CBD = as.numeric(gDistance(gCentroid(grid, byid = T), CBD, byid = T))
covs$dist_CBD = dist_CBD
### is MRT
is_mrt = as.numeric(!is.na(over(grid, mrt)))
covs$is_mrt = is_mrt
### demographics
if(file.exists(paste0(basepath, "dataraw/poverty_map_2/version_2022_08/poverty-rate_", type, res, ".csv"))){
demo = read.csv(paste0(basepath, "dataraw/poverty_map_2/version_2022_08/poverty-rate_", type, res, ".csv"))
demo$ispoor = as.numeric(demo$fgt0_2020 >= median(demo$fgt0_2020))
covs = merge(covs, demo, by.x = "id", by.y = "grid_id", all.x = T)
}
### DKI indicator
covs$is_DKI = as.numeric(gIntersects(grid, DKI, byid = T))
### can add some here (morning commute?)
### export
write.csv(covs, paste0(outpath, "/geo-stats/covariates.csv"))
#########
### if exists, add bdrive over from raw and compute shortest paths
#########
for(btype in c("brt", "nonbrt")){
if(file.exists(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_bdrive_", btype, ".csv"))){
bdrive = read.csv(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_bdrive_", btype, ".csv"), header = F)
write.csv(bdrive, paste0(outpath, "/bdrive_", btype, ".csv"))
for(dkitype in c(TRUE, FALSE)){
if(dkitype){
sp_adj = bdrive[which(covs$is_DKI == 1), which(covs$is_DKI == 1)]
suffix = "_DKI"
}else{
sp_adj = bdrive
suffix = ""
}
sp_adj[sp_adj==Inf] = 0
sp_g = graph_from_adjacency_matrix(as.matrix(sp_adj), weighted = TRUE)
asp_list = vector(mode = "list", length(sp_adj))
# find shortest paths
for(i in 1:length(sp_adj)){
asp = shortest_paths(sp_g, from = i)
asp_list[[i]] = lapply(asp$vpath, as.numeric)
}
write_json(asp_list, path = paste0(outfoldertype, "/spaths_", bustype, suffix,  ".json"))
}
}
}
}
}
file.exists(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_bdrive_", btype, ".csv"))
res
type
outpath = paste0(basepath, "datacoded/gis/full_geography/", res, "-", res,  "/", type)
grid = readOGR(paste0(outpath, "/shapefile/grid.shp"))
covs = data.frame("id" = grid$id)
### distance to CBD
dist_CBD = as.numeric(gDistance(gCentroid(grid, byid = T), CBD, byid = T))
covs$dist_CBD = dist_CBD
### is MRT
is_mrt = as.numeric(!is.na(over(grid, mrt)))
covs$is_mrt = is_mrt
### demographics
if(file.exists(paste0(basepath, "dataraw/poverty_map_2/version_2022_08/poverty-rate_", type, res, ".csv"))){
demo = read.csv(paste0(basepath, "dataraw/poverty_map_2/version_2022_08/poverty-rate_", type, res, ".csv"))
demo$ispoor = as.numeric(demo$fgt0_2020 >= median(demo$fgt0_2020))
covs = merge(covs, demo, by.x = "id", by.y = "grid_id", all.x = T)
}
### DKI indicator
covs$is_DKI = as.numeric(gIntersects(grid, DKI, byid = T))
### export
write.csv(covs, paste0(outpath, "/geo-stats/covariates.csv"))
outpath
btype
file.exists(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_bdrive_", btype, ".csv"))
bdrive = read.csv(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_bdrive_", btype, ".csv"), header = F)
write.csv(bdrive, paste0(outpath, "/bdrive_", btype, ".csv"))
for(dkitype in c(TRUE, FALSE)){
if(dkitype){
sp_adj = bdrive[which(covs$is_DKI == 1), which(covs$is_DKI == 1)]
suffix = "_DKI"
}else{
sp_adj = bdrive
suffix = ""
}
sp_adj[sp_adj==Inf] = 0
sp_g = graph_from_adjacency_matrix(as.matrix(sp_adj), weighted = TRUE)
asp_list = vector(mode = "list", length(sp_adj))
# find shortest paths
for(i in 1:length(sp_adj)){
asp = shortest_paths(sp_g, from = i)
asp_list[[i]] = lapply(asp$vpath, as.numeric)
}
write_json(asp_list, path = paste0(outfoldertype, "/spaths_", bustype, suffix,  ".json"))
}
outpath
#######################
# this script build a covariates dataframe for each geography
#######################
require(sp)
require(rgeos)
require(rgdal)
require(terra)
require(readxl)
require(igraph)
require(jsonlite)
CBD_coeff = data.frame("lon" = 106.82747045791965, "lat" = -6.176975875789045)
CBD = SpatialPoints(CBD_coeff)
crs(CBD) = "+proj=longlat +datum=WGS84 +no_defs"
mrt = SpatialPoints(read_xlsx("/Users/tilmangraff/Library/CloudStorage/GoogleDrive-tgraff@g.harvard.edu/My Drive/optnets_replication/dataraw/other/mrt_stations.xlsx")[,c("longitude", "latitude")])
crs(mrt) = "+proj=longlat +datum=WGS84 +no_defs"
basepath = "/Users/tilmangraff/Library/CloudStorage/GoogleDrive-tgraff@g.harvard.edu/My Drive/optnets_replication/"
DKI = readOGR(paste0(basepath, "/dataraw/gis/shapefiles/DKI/dki-kabupaten-dissolved.shp"))
for(res in c("500", "1000", "2000")){
for(type in c("hex", "square")){
outpath = paste0(basepath, "datacoded/gis/full_geography/", res, "-", res,  "/", type)
grid = readOGR(paste0(outpath, "/shapefile/grid.shp"))
covs = data.frame("id" = grid$id)
### distance to CBD
dist_CBD = as.numeric(gDistance(gCentroid(grid, byid = T), CBD, byid = T))
covs$dist_CBD = dist_CBD
### is MRT
is_mrt = as.numeric(!is.na(over(grid, mrt)))
covs$is_mrt = is_mrt
### demographics
if(file.exists(paste0(basepath, "dataraw/poverty_map_2/version_2022_08/poverty-rate_", type, res, ".csv"))){
demo = read.csv(paste0(basepath, "dataraw/poverty_map_2/version_2022_08/poverty-rate_", type, res, ".csv"))
demo$ispoor = as.numeric(demo$fgt0_2020 >= median(demo$fgt0_2020))
covs = merge(covs, demo, by.x = "id", by.y = "grid_id", all.x = T)
}
### DKI indicator
covs$is_DKI = as.numeric(gIntersects(grid, DKI, byid = T))
### can add some here (morning commute?)
### export
write.csv(covs, paste0(outpath, "/geo-stats/covariates.csv"))
#########
### if exists, add bdrive over from raw and compute shortest paths
#########
for(btype in c("brt", "nonbrt")){
if(file.exists(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_bdrive_", btype, ".csv"))){
bdrive = read.csv(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_bdrive_", btype, ".csv"), header = F)
write.csv(bdrive, paste0(outpath, "/bdrive_", btype, ".csv"))
for(dkitype in c(TRUE, FALSE)){
if(dkitype){
sp_adj = bdrive[which(covs$is_DKI == 1), which(covs$is_DKI == 1)]
suffix = "_DKI"
}else{
sp_adj = bdrive
suffix = ""
}
sp_adj[sp_adj==Inf] = 0
sp_g = graph_from_adjacency_matrix(as.matrix(sp_adj), weighted = TRUE)
asp_list = vector(mode = "list", length(sp_adj))
# find shortest paths
for(i in 1:length(sp_adj)){
asp = shortest_paths(sp_g, from = i)
asp_list[[i]] = lapply(asp$vpath, as.numeric)
}
write_json(asp_list, path = paste0(outpath, "/spaths_", bustype, suffix,  ".json"))
}
}
}
}
}
#######################
# this script build a covariates dataframe for each geography
#######################
require(sp)
require(rgeos)
require(rgdal)
require(terra)
require(readxl)
require(igraph)
require(jsonlite)
CBD_coeff = data.frame("lon" = 106.82747045791965, "lat" = -6.176975875789045)
CBD = SpatialPoints(CBD_coeff)
crs(CBD) = "+proj=longlat +datum=WGS84 +no_defs"
mrt = SpatialPoints(read_xlsx("/Users/tilmangraff/Library/CloudStorage/GoogleDrive-tgraff@g.harvard.edu/My Drive/optnets_replication/dataraw/other/mrt_stations.xlsx")[,c("longitude", "latitude")])
crs(mrt) = "+proj=longlat +datum=WGS84 +no_defs"
basepath = "/Users/tilmangraff/Library/CloudStorage/GoogleDrive-tgraff@g.harvard.edu/My Drive/optnets_replication/"
DKI = readOGR(paste0(basepath, "/dataraw/gis/shapefiles/DKI/dki-kabupaten-dissolved.shp"))
for(res in c("500", "1000", "2000")){
for(type in c("hex", "square")){
outpath = paste0(basepath, "datacoded/gis/full_geography/", res, "-", res,  "/", type)
grid = readOGR(paste0(outpath, "/shapefile/grid.shp"))
covs = data.frame("id" = grid$id)
### distance to CBD
dist_CBD = as.numeric(gDistance(gCentroid(grid, byid = T), CBD, byid = T))
covs$dist_CBD = dist_CBD
### is MRT
is_mrt = as.numeric(!is.na(over(grid, mrt)))
covs$is_mrt = is_mrt
### demographics
if(file.exists(paste0(basepath, "dataraw/poverty_map_2/version_2022_08/poverty-rate_", type, res, ".csv"))){
demo = read.csv(paste0(basepath, "dataraw/poverty_map_2/version_2022_08/poverty-rate_", type, res, ".csv"))
demo$ispoor = as.numeric(demo$fgt0_2020 >= median(demo$fgt0_2020))
covs = merge(covs, demo, by.x = "id", by.y = "grid_id", all.x = T)
}
### DKI indicator
covs$is_DKI = as.numeric(gIntersects(grid, DKI, byid = T))
### can add some here (morning commute?)
### export
write.csv(covs, paste0(outpath, "/geo-stats/covariates.csv"))
#########
### if exists, add bdrive over from raw and compute shortest paths
#########
for(btype in c("brt", "nonbrt")){
if(file.exists(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_bdrive_", btype, ".csv"))){
bdrive = read.csv(paste0(basepath, "/dataraw/gis/precoded_data/bdrives/", res, "_", type, "_bdrive_", btype, ".csv"), header = F)
write.csv(bdrive, paste0(outpath, "/bdrive_", btype, ".csv"))
for(dkitype in c(TRUE, FALSE)){
if(dkitype){
sp_adj = bdrive[which(covs$is_DKI == 1), which(covs$is_DKI == 1)]
suffix = "_DKI"
}else{
sp_adj = bdrive
suffix = ""
}
sp_adj[sp_adj==Inf] = 0
sp_g = graph_from_adjacency_matrix(as.matrix(sp_adj), weighted = TRUE)
asp_list = vector(mode = "list", length(sp_adj))
# find shortest paths
for(i in 1:length(sp_adj)){
asp = shortest_paths(sp_g, from = i)
asp_list[[i]] = lapply(asp$vpath, as.numeric)
}
write_json(asp_list, path = paste0(outpath, "/spaths_", btype, suffix,  ".json"))
}
}
}
}
}
install.packages("arrow")
require(arrow)
x = read_parquet("/Users/tilmangraff/Library/CloudStorage/GoogleDrive-tgraff@g.harvard.edu/My Drive/optnets_replication/datacoded/vera_trips/vera_flows_panel_hex2000.parquet")
x = read_parquet("/Users/tilmangraff/Library/CloudStorage/GoogleDrive-tgraff@g.harvard.edu/My Drive/optnets_replication/datacoded/vera_trips/vera_flows_panel_hex2000.parquet")
x = read_parquet("/Users/tilmangraff/Library/CloudStorage/GoogleDrive-tgraff@g.harvard.edu/My Drive/optnets_replication/datacoded/vera_trips/vera_flows_panel_hex2000.parquet")
Sys.setenv(LIBARROW_MINIMAL = "false")
install.packages("arrow")
install.packages("arrow")
require(arrow)
x = read_parquet("/Users/tilmangraff/Library/CloudStorage/GoogleDrive-tgraff@g.harvard.edu/My Drive/optnets_replication/datacoded/vera_trips/vera_flows_panel_hex2000.parquet")
install.packages("arrow", type = "source")
install.packages("arrow", type = "source")
requi
require(arrow)
x = read_parquet("/Users/tilmangraff/Library/CloudStorage/GoogleDrive-tgraff@g.harvard.edu/My Drive/optnets_replication/datacoded/vera_trips/vera_flows_panel_hex2000.parquet")
